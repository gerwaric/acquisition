name: Build & Package (Windows)

on:
  #push:
  #  branches: [ main, master ]
  #  tags: [ 'v*' ]
  #pull_request:
  #  branches: [ main, master ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-windows-installer:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive  # In case you have git submodules
        fetch-depth: 0         # For proper version tagging
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.9.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtwebsockets qthttpserver'
        cache: true
        cache-key-prefix: 'qt-6.9.1-win64'
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-
    
    - name: Configure CMake
      run: |
        cmake -B build -S . `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" `
          -DCMAKE_GENERATOR="Visual Studio 17 2022" `
          -DCMAKE_GENERATOR_PLATFORM=x64
    
    - name: Build application
      run: |
        cmake --build build --config Release --parallel
    
    - name: Run tests (optional)
      run: |
        cd build
        ctest --config Release --output-on-failure
      continue-on-error: true  # Remove this if tests are required to pass
    
    - name: Setup Inno Setup
      run: |
        # Download and install Inno Setup
        $innoSetupUrl = "https://jrsoftware.org/download.php/is.exe"
        $innoSetupInstaller = "$env:TEMP\innosetup.exe"
        Invoke-WebRequest -Uri $innoSetupUrl -OutFile $innoSetupInstaller
        Start-Process -FilePath $innoSetupInstaller -ArgumentList "/VERYSILENT", "/NORESTART" -Wait
        
        # Add Inno Setup to PATH
        $innoSetupPath = "${env:ProgramFiles(x86)}\Inno Setup 6"
        echo "$innoSetupPath" >> $env:GITHUB_PATH
    
    - name: Prepare installer files
      run: |
        # Create installer directory structure
        New-Item -ItemType Directory -Force -Path "installer"
        
        # Copy built executable and dependencies
        Copy-Item "build\Release\*.exe" "installer\" -Recurse -Force
        Copy-Item "build\Release\*.dll" "installer\" -Recurse -Force -ErrorAction SilentlyContinue

        # Copy generated version header (needed by installer)
        Copy-Item "build\version_defines.h" "installer\" -Force -ErrorAction SilentlyContinue
                
        # Deploy Qt dependencies
        & "$env:QT_ROOT_DIR\bin\windeployqt.exe" `
          --release `
          --no-translations `
          --no-system-d3d-compiler `
          --no-opengl-sw `
          "installer\acquisition.exe"  # Replace with your actual exe name
    
    - name: Get version info
      id: version
      run: |
        # Extract version from git tag or commit
        if ($env:GITHUB_REF -match '^refs/tags/v(.+)$') {
          $version = $matches[1]
        } else {
          $version = "dev-$(git rev-parse --short HEAD)"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
    
    - name: Build installer with Inno Setup
      run: |
        # Assuming your .iss file is in the root directory
        # Update the script with current version
        #$issContent = Get-Content "acquisition.iss" -Raw  # Replace with your actual .iss filename
        #$issContent = $issContent -replace '#define MyAppVersion ".*"', "#define MyAppVersion `"${{ steps.version.outputs.version }}`""
        #$issContent | Set-Content "acquisition_build.iss"
        #
        # Compile the installer
        & "ISCC.exe" /DBUILD_DIR="installer" /DDEPLOY_DIR="installer" "installer.iss"
    
    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: acquisition-installer-${{ steps.version.outputs.version }}
        path: Output/*.exe  # Default Inno Setup output directory
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: Output/*.exe
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build and test on other platforms
  build-other-platforms:
    if: false  # Set to true if you want to build/test on other platforms
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.9.1'
        modules: 'qtbase qttools qtnetworkauth qtwebengine'
        cache: true
    
    - name: Configure and build
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --config Release --output-on-failure
